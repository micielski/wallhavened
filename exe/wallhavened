#!/usr/bin/env ruby

require_relative "../lib/wallhavened"
require "thor"
require "cli/ui"
require "fileutils"

module Utils
  def self.prepare_directory(directory)
    FileUtils.mkdir_p(directory) unless File.exist?(directory)
  end

  def self.download_walls(walls, directory, spinner)
    
    walls.each_with_index do |wall, i|
      spinner.update_title("Downloading wallpapers.. [#{i + 1}/#{walls.count}]")
      if !File.exist?("#{directory}/#{wall.filename}")
        wall.download(directory)
      end
    end
  end
end

class App < Thor
  package_name "wallhavened"

  def self.exit_on_failure?
    true
  end

  desc "download_all_collections USERNAME API_KEY DIRECTORY", "Download wallpapers from all user collections"
  method_options username: :string, api_key: :string, directory: :string
  def download_all_collections(username, api_key, directory)
    download_collections(:all, username, api_key, directory)
  end

  desc "download_collection USERNAME API_KEY DIRECTORY", "Download wallpapers from a user collection"
  method_options username: :string, api_key: :string, directory: :string
  def download_collection(username, api_key, directory)
    download_collections(:single, username, api_key, directory)
  end

  private

  def download_collections(type, username, api_key, directory)
    Utils.prepare_directory(directory)
    client = Wallhavened::AuthClient.new(username, api_key)

    case type
    when :all
      download_all(client, directory)
    when :single
      collection = prompt_for_collection(client)
      download_single(client, collection.id, directory)
    end

    puts "Wallpapers available in #{directory}"
  end

  def download_all(client, directory)
    CLI::UI::Spinner.spin("Collecting collection data...") do |spinner|
      walls = client.scrape_all_user_collections
      Utils.download_walls(walls, directory, spinner)
    end
  end

  def download_single(client, collection_id, directory)
    CLI::UI::Spinner.spin("Collecting collection data...") do |spinner|
      walls = client.scrape_collection(collection_id)
      Utils.download_walls(walls, directory, spinner)
    end
  end

  def prompt_for_collection(client)
    CLI::UI::Prompt.ask("Which collection to download?") do |handler|
      client.user_collections do |user_collection|
        handler.option(user_collection.label) { user_collection }
      end
    end
  end
end

CLI::UI::StdoutRouter.enable
App.start
